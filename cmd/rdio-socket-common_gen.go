package cmd

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"time"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *FileSlabExtentInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Extents":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Extents")
				return
			}
			if cap(z.Extents) >= int(zb0002) {
				z.Extents = (z.Extents)[:zb0002]
			} else {
				z.Extents = make([]ExtentInfo, zb0002)
			}
			for za0001 := range z.Extents {
				err = z.Extents[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Extents", za0001)
					return
				}
			}
		case "FileSize":
			z.FileSize, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "FileSize")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FileSlabExtentInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Extents"
	err = en.Append(0x82, 0xa7, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Extents)))
	if err != nil {
		err = msgp.WrapError(err, "Extents")
		return
	}
	for za0001 := range z.Extents {
		err = z.Extents[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Extents", za0001)
			return
		}
	}
	// write "FileSize"
	err = en.Append(0xa8, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.FileSize)
	if err != nil {
		err = msgp.WrapError(err, "FileSize")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FileSlabExtentInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Extents"
	o = append(o, 0x82, 0xa7, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Extents)))
	for za0001 := range z.Extents {
		o, err = z.Extents[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Extents", za0001)
			return
		}
	}
	// string "FileSize"
	o = append(o, 0xa8, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt(o, z.FileSize)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FileSlabExtentInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Extents":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Extents")
				return
			}
			if cap(z.Extents) >= int(zb0002) {
				z.Extents = (z.Extents)[:zb0002]
			} else {
				z.Extents = make([]ExtentInfo, zb0002)
			}
			for za0001 := range z.Extents {
				bts, err = z.Extents[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Extents", za0001)
					return
				}
			}
		case "FileSize":
			z.FileSize, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FileSize")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FileSlabExtentInfo) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Extents {
		s += z.Extents[za0001].Msgsize()
	}
	s += 9 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FileSlabResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "fsei":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Fsei")
				return
			}
			if cap(z.Fsei) >= int(zb0002) {
				z.Fsei = (z.Fsei)[:zb0002]
			} else {
				z.Fsei = make([]FileSlabExtentInfo, zb0002)
			}
			for za0001 := range z.Fsei {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Fsei", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Fsei", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Extents":
						var zb0004 uint32
						zb0004, err = dc.ReadArrayHeader()
						if err != nil {
							err = msgp.WrapError(err, "Fsei", za0001, "Extents")
							return
						}
						if cap(z.Fsei[za0001].Extents) >= int(zb0004) {
							z.Fsei[za0001].Extents = (z.Fsei[za0001].Extents)[:zb0004]
						} else {
							z.Fsei[za0001].Extents = make([]ExtentInfo, zb0004)
						}
						for za0002 := range z.Fsei[za0001].Extents {
							err = z.Fsei[za0001].Extents[za0002].DecodeMsg(dc)
							if err != nil {
								err = msgp.WrapError(err, "Fsei", za0001, "Extents", za0002)
								return
							}
						}
					case "FileSize":
						z.Fsei[za0001].FileSize, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Fsei", za0001, "FileSize")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Fsei", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FileSlabResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "fsei"
	err = en.Append(0x81, 0xa4, 0x66, 0x73, 0x65, 0x69)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Fsei)))
	if err != nil {
		err = msgp.WrapError(err, "Fsei")
		return
	}
	for za0001 := range z.Fsei {
		// map header, size 2
		// write "Extents"
		err = en.Append(0x82, 0xa7, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.Fsei[za0001].Extents)))
		if err != nil {
			err = msgp.WrapError(err, "Fsei", za0001, "Extents")
			return
		}
		for za0002 := range z.Fsei[za0001].Extents {
			err = z.Fsei[za0001].Extents[za0002].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Fsei", za0001, "Extents", za0002)
				return
			}
		}
		// write "FileSize"
		err = en.Append(0xa8, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65)
		if err != nil {
			return
		}
		err = en.WriteInt(z.Fsei[za0001].FileSize)
		if err != nil {
			err = msgp.WrapError(err, "Fsei", za0001, "FileSize")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FileSlabResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "fsei"
	o = append(o, 0x81, 0xa4, 0x66, 0x73, 0x65, 0x69)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Fsei)))
	for za0001 := range z.Fsei {
		// map header, size 2
		// string "Extents"
		o = append(o, 0x82, 0xa7, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Fsei[za0001].Extents)))
		for za0002 := range z.Fsei[za0001].Extents {
			o, err = z.Fsei[za0001].Extents[za0002].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Fsei", za0001, "Extents", za0002)
				return
			}
		}
		// string "FileSize"
		o = append(o, 0xa8, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65)
		o = msgp.AppendInt(o, z.Fsei[za0001].FileSize)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FileSlabResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "fsei":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Fsei")
				return
			}
			if cap(z.Fsei) >= int(zb0002) {
				z.Fsei = (z.Fsei)[:zb0002]
			} else {
				z.Fsei = make([]FileSlabExtentInfo, zb0002)
			}
			for za0001 := range z.Fsei {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Fsei", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Fsei", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Extents":
						var zb0004 uint32
						zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Fsei", za0001, "Extents")
							return
						}
						if cap(z.Fsei[za0001].Extents) >= int(zb0004) {
							z.Fsei[za0001].Extents = (z.Fsei[za0001].Extents)[:zb0004]
						} else {
							z.Fsei[za0001].Extents = make([]ExtentInfo, zb0004)
						}
						for za0002 := range z.Fsei[za0001].Extents {
							bts, err = z.Fsei[za0001].Extents[za0002].UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "Fsei", za0001, "Extents", za0002)
								return
							}
						}
					case "FileSize":
						z.Fsei[za0001].FileSize, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Fsei", za0001, "FileSize")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Fsei", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FileSlabResponse) Msgsize() (s int) {
	s = 1 + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Fsei {
		s += 1 + 8 + msgp.ArrayHeaderSize
		for za0002 := range z.Fsei[za0001].Extents {
			s += z.Fsei[za0001].Extents[za0002].Msgsize()
		}
		s += 9 + msgp.IntSize
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RawIOResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "es":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Extents")
				return
			}
			if cap(z.Extents) >= int(zb0002) {
				z.Extents = (z.Extents)[:zb0002]
			} else {
				z.Extents = make([]ExtentInfo, zb0002)
			}
			for za0001 := range z.Extents {
				err = z.Extents[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Extents", za0001)
					return
				}
			}
		case "filesize":
			z.FileSize, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "FileSize")
				return
			}
		case "error":
			z.Err, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "time":
			z.MTime, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "MTime")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RawIOResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	if z.FileSize == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Err == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.MTime == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "es"
	err = en.Append(0xa2, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Extents)))
	if err != nil {
		err = msgp.WrapError(err, "Extents")
		return
	}
	for za0001 := range z.Extents {
		err = z.Extents[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Extents", za0001)
			return
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "filesize"
		err = en.Append(0xa8, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65)
		if err != nil {
			return
		}
		err = en.WriteInt(z.FileSize)
		if err != nil {
			err = msgp.WrapError(err, "FileSize")
			return
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "error"
		err = en.Append(0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
		if err != nil {
			return
		}
		err = en.WriteString(z.Err)
		if err != nil {
			err = msgp.WrapError(err, "Err")
			return
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "time"
		err = en.Append(0xa4, 0x74, 0x69, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteTime(z.MTime)
		if err != nil {
			err = msgp.WrapError(err, "MTime")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RawIOResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	if z.FileSize == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Err == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.MTime == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "es"
	o = append(o, 0xa2, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Extents)))
	for za0001 := range z.Extents {
		o, err = z.Extents[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Extents", za0001)
			return
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "filesize"
		o = append(o, 0xa8, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65)
		o = msgp.AppendInt(o, z.FileSize)
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "error"
		o = append(o, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
		o = msgp.AppendString(o, z.Err)
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "time"
		o = append(o, 0xa4, 0x74, 0x69, 0x6d, 0x65)
		o = msgp.AppendTime(o, z.MTime)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RawIOResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "es":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Extents")
				return
			}
			if cap(z.Extents) >= int(zb0002) {
				z.Extents = (z.Extents)[:zb0002]
			} else {
				z.Extents = make([]ExtentInfo, zb0002)
			}
			for za0001 := range z.Extents {
				bts, err = z.Extents[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Extents", za0001)
					return
				}
			}
		case "filesize":
			z.FileSize, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FileSize")
				return
			}
		case "error":
			z.Err, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "time":
			z.MTime, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MTime")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RawIOResponse) Msgsize() (s int) {
	s = 1 + 3 + msgp.ArrayHeaderSize
	for za0001 := range z.Extents {
		s += z.Extents[za0001].Msgsize()
	}
	s += 9 + msgp.IntSize + 6 + msgp.StringPrefixSize + len(z.Err) + 5 + msgp.TimeSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Request) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "type":
			z.Type, err = dc.ReadByte()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "path":
			z.FilePath, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FilePath")
				return
			}
		case "volume":
			z.Volume, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Volume")
				return
			}
		case "object":
			z.Object, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Object")
				return
			}
		case "filesize":
			z.FileSize, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "FileSize")
				return
			}
		case "len":
			z.Len, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Len")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Request) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(7)
	var zb0001Mask uint8 /* 7 bits */
	if z.Volume == "" {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Object == "" {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.FileSize == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.Len == 0 {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "id"
	err = en.Append(0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "type"
	err = en.Append(0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteByte(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "path"
	err = en.Append(0xa4, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.FilePath)
	if err != nil {
		err = msgp.WrapError(err, "FilePath")
		return
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "volume"
		err = en.Append(0xa6, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Volume)
		if err != nil {
			err = msgp.WrapError(err, "Volume")
			return
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "object"
		err = en.Append(0xa6, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74)
		if err != nil {
			return
		}
		err = en.WriteString(z.Object)
		if err != nil {
			err = msgp.WrapError(err, "Object")
			return
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// write "filesize"
		err = en.Append(0xa8, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65)
		if err != nil {
			return
		}
		err = en.WriteInt(z.FileSize)
		if err != nil {
			err = msgp.WrapError(err, "FileSize")
			return
		}
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// write "len"
		err = en.Append(0xa3, 0x6c, 0x65, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteInt(z.Len)
		if err != nil {
			err = msgp.WrapError(err, "Len")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Request) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(7)
	var zb0001Mask uint8 /* 7 bits */
	if z.Volume == "" {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Object == "" {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.FileSize == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.Len == 0 {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "id"
	o = append(o, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.Id)
	// string "type"
	o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendByte(o, z.Type)
	// string "path"
	o = append(o, 0xa4, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.FilePath)
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "volume"
		o = append(o, 0xa6, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65)
		o = msgp.AppendString(o, z.Volume)
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "object"
		o = append(o, 0xa6, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74)
		o = msgp.AppendString(o, z.Object)
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// string "filesize"
		o = append(o, 0xa8, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65)
		o = msgp.AppendInt(o, z.FileSize)
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// string "len"
		o = append(o, 0xa3, 0x6c, 0x65, 0x6e)
		o = msgp.AppendInt(o, z.Len)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Request) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "type":
			z.Type, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "path":
			z.FilePath, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FilePath")
				return
			}
		case "volume":
			z.Volume, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Volume")
				return
			}
		case "object":
			z.Object, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Object")
				return
			}
		case "filesize":
			z.FileSize, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FileSize")
				return
			}
		case "len":
			z.Len, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Len")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Request) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int64Size + 5 + msgp.ByteSize + 5 + msgp.StringPrefixSize + len(z.FilePath) + 7 + msgp.StringPrefixSize + len(z.Volume) + 7 + msgp.StringPrefixSize + len(z.Object) + 9 + msgp.IntSize + 4 + msgp.IntSize
	return
}
